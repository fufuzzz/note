# 赋值运算符
# =
# += -= *= /= //= %= **= 复合运算符

a = 10
# a = a + 12
a += 2  # 12
a -= 2  # 10
a *= 2  # 20
a /= 2
a //= 2
a %= 2
a **= 2
print(a)

# 赋值运算符的特殊场景
m, n = 3, 5
print(m, n)

x = 'hello', 'good', 'yes'
print(x)  # ('hello', 'good', 'yes')

# y, z = 1, 2, 3, 4, 5
# print(y, z)

# 拆包时,变量的个数和值得个数不一致,会报错
# o, p, q = 2, 3
# print(o, p, q)

# * 表示可变长度
o, *p, q = 1, 2, 3, 4, 5, 6
print(o, p, q)  # 1 [2, 3, 4, 5] 6

o, p, *q = 1, 2, 3, 4, 5, 6
print(o, p, q)  # 1 2 [3, 4, 5, 6]

# 位运算符[扩展]: 了解
print(13 & 5)  # 按 位 与

print(12 | 5)  # 按 位 或

print(12 ^ 5)  # 按 位 异或  相同为0,不同为1

print(13 >> 2)  # 位右移2位

print(13 << 2)  # 位左移2位

print(~6)  # -7 按位取反

# 原码,反码,补码
#      计算机是使用补码运算
# 正数的原码,反码,补码是一样
# 负数的补码是反码+1
# 00000000 00000000 00000000 00000110 => 6
# 11111111 11111111 11111111 11111001 => ~6 补码
# 11111111 11111111 11111111 11111000 => 反码: 补码-1
# 10000000 00000000 00000000 00000111 => 原码 -7

# -7
# 10000000 00000000 00000000 00000111 => 原码, 第一位如果是0就表示整数,如果是1表示负数
# 11111111 11111111 11111111 11111000 => 反码,符号位(第一位)不变,其他全部取反
# 11111111 11111111 11111111 11111001 => 补码,反码+1

color = 0xF0384E
red = color >> 16
green = color >> 8 & 0xFF
blue = color & 0xFF

print(hex(red), hex(blue), hex(green))

# 其他编程语言
# 一元运算符: a++, ++a, a--, --a
# a=10
# print(a++)  # a += 1

# 三目运算符
# ? :
a = 10
b = 20
# n = a > b ? a : b
n = a if a > b else b  # Python的写法

# 二元
